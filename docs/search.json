{
  "articles": [
    {
      "path": "about.html",
      "title": "About this site",
      "description": "Some additional details about the website",
      "author": [],
      "contents": "\r\n\r\n\r\n\r\n",
      "last_modified": "2022-09-08T20:39:10-07:00"
    },
    {
      "path": "index.html",
      "title": "Vegetation Water Requirements",
      "description": "Welcome to the website. I hope you enjoy it!\n",
      "author": [],
      "contents": "\r\n\r\n\r\n\r\n",
      "last_modified": "2022-09-08T20:46:00-07:00"
    },
    {
      "path": "point_frame_vwr.html",
      "title": "Greenbook section III.A.1. Calculation of Vegetation Water Requirement",
      "description": "Methods recorded in code to make future improvements accessible\n",
      "author": [
        {
          "name": "Zach Nelson",
          "url": "https://github.com/zach-nelson"
        }
      ],
      "date": "`r Sys.Date()`",
      "contents": "\r\nThis reproducible R Markdown analysis was created with targets (version 0.4.2)[https://docs.ropensci.org/targets/]. The targets package provides the data pipeline functions, where upstream changes to files cause only those downstream dependencies to be rerun. Using targets also has the nice byproduct of forcing functional programming habits over imperative programming, which should make the code easier to maintain.\r\nTargets\r\nBelow is an example of a _targets.R file\r\n\r\n\r\nlibrary(targets)\r\nlibrary(tidyverse)\r\nlibrary(tarchetypes)\r\nlibrary(DT)\r\n\r\n# source the functions for the pipeline\r\nsource(\"code/R/functions.R\")\r\n# package dependencies\r\ntar_option_set(\r\n  packages = c(\r\n    \"tidyverse\",\r\n    \"stringr\"\r\n  )\r\n\r\n  # Here we string together the pipeline in a list\r\n)\r\nlist(\r\n  # set the year we are working with\r\n  tar_target(cYear, 2021),\r\n  # set the file names to watch for changes - point_frame.csv is the only one changing each year\r\n  tar_target(vwrmax_file, \"data/vwr_max_lookup.csv\", format = \"file\"),\r\n  tar_target(sitesoil_file, \"data/vwr_site_soil_designation.csv\", format = \"file\"),\r\n  tar_target(pointframe_file, paste0(\"data/point_frame_\",cYear,\".csv\"), format = \"file\"),\r\n  # if the file has changed since the last tar_make(), read in the updated file\r\n  tar_target(vwrmax_lookt, read.csv(vwrmax_file)),\r\n  tar_target(sitesoil, read.csv(sitesoil_file)),\r\n  tar_target(pointframe_wide, read.csv(pointframe_file)),\r\n\r\n  # tidy point frame data\r\n  tar_target(pointframe_long, gather(pointframe_wide, species, all.hits, SPAI:OTHER)),\r\n  # calculate LAI from species cover rows - greenbook formula .5 extinction coefficient\r\n  tar_target(pointframe_lai, mutate(pointframe_long, lai = all.hits/334 * 2)),\r\n\r\n  # Join columns, site soil, lai, vwr max lookup values\r\n  tar_target(lai_ss, left_join(sitesoil,pointframe_lai, by = \"site\")),\r\n  tar_target(lai_ss_vwrmax,left_join(lai_ss,vwrmax_lookt, by = c('soil','species'))),\r\n\r\n  # calculate vwr of six primary species\r\n  tar_target(vwr, mutate(lai_ss_vwrmax,vwr = lai*vwr_at_lai_max)),\r\n  # calculate weighted average of six species VWR/LAI for each site\r\n  tar_target(weighted.avg., weighted_avg(vwr)),\r\n\r\n  # joins the weighted average and calcs vwr for other category\r\n  # creates new column containing both vwr for each species and the other column\r\n  # creates new site column as factor with levels corresponding north to south following VWR excel table.\r\n  tar_target(vwr.total,vwr_total(vwr,weighted.avg.)),\r\n\r\n  # view wider with period (july, oct) as columns following VWR excel table.\r\n  tar_target(vwr.wide.period, vwr_site_total_period(vwr.total, cYear))\r\n  )\r\n\r\n\r\n\r\nFunctions\r\n\r\n\r\n#' Title\r\n#'\r\n#' @param vwr\r\n#'\r\n#' @return\r\n#' @export\r\n#'\r\n#' @examples\r\nweighted_avg <- function(vwr){\r\n  vwr %>% filter(species != 'OTHER') %>% filter(all.hits >0) %>%\r\n    group_by(site,period) %>%\r\n    summarise(w_avg_vwr_per_lai = sum(vwr)/sum(lai)) %>%\r\n    mutate(species = 'OTHER')\r\n}\r\n\r\n#' Title\r\n#'\r\n#' @param vwr\r\n#' @param weighted.avg.\r\n#'\r\n#' @return\r\n#' @export\r\n#'\r\n#' @examples\r\nvwr_total <- function(vwr, weighted.avg.){\r\n  vwr %>% left_join(weighted.avg., by = c('site', 'species', 'period')) %>%\r\n    mutate(other.vwr = w_avg_vwr_per_lai * lai,\r\n           total.vwr = case_when(!is.na(vwr)~vwr,\r\n                                 !is.na(other.vwr)~other.vwr),\r\n           site.f = factor(site, levels = c(\"LW1\",\r\n                                            \"LW2\",\r\n                                            \"LW3\",\r\n                                            \"BC1\",\r\n                                            \"BC2\",\r\n                                            \"BC3\",\r\n                                            \"BP1\",\r\n                                            \"BP2\",\r\n                                            \"BP3\",\r\n                                            \"BP4\",\r\n                                            \"TA3\",\r\n                                            \"TA4\",\r\n                                            \"TA5\",\r\n                                            \"TA6\",\r\n                                            \"TAC\",\r\n                                            \"TS1\",\r\n                                            \"TS2\",\r\n                                            \"TS3\",\r\n                                            \"TS4\",\r\n                                            \"TSC\",\r\n                                            \"IO1\",\r\n                                            \"IO2\",\r\n                                            \"IC1\",\r\n                                            \"IC2\",\r\n                                            \"SS1\",\r\n                                            \"SS2\",\r\n                                            \"SS3\",\r\n                                            \"SS4\",\r\n                                            \"BG2\",\r\n                                            \"BGC\")\r\n                           )\r\n    )\r\n\r\n}\r\n\r\n\r\n#' Title\r\n#'\r\n#' @param vwr.total \r\n#' @param cYear \r\n#'\r\n#' @return\r\n#' @export\r\n#'\r\n#' @examples\r\nvwr_site_total_period <- function(vwr.total,cYear){\r\n  vwr.total %>% filter(all.hits > 0) %>%\r\n  select(site.f,period,species,lai,total.vwr) %>%\r\n  group_by(site.f,period) %>%\r\n  summarise(site.vwr = sum(total.vwr)) %>%\r\n  pivot_wider(names_from = period, values_from = site.vwr)\r\n}\r\n\r\n\r\n\r\nView targets pipeline\r\n\r\n-- Attaching packages --------------------------------------- tidyverse 1.3.1 --\r\nv ggplot2 3.3.5     v purrr   0.3.4\r\nv tibble  3.1.2     v dplyr   1.0.7\r\nv tidyr   1.1.3     v stringr 1.4.0\r\nv readr   1.4.0     v forcats 0.5.1\r\n-- Conflicts ------------------------------------------ tidyverse_conflicts() --\r\nx dplyr::filter() masks stats::filter()\r\nx dplyr::lag()    masks stats::lag()\r\nWarning messages:\r\n1: package 'targets' was built under R version 4.0.5 \r\n2: package 'tidyverse' was built under R version 4.0.5 \r\n3: package 'ggplot2' was built under R version 4.0.5 \r\n4: package 'tibble' was built under R version 4.0.5 \r\n5: package 'tidyr' was built under R version 4.0.5 \r\n6: package 'readr' was built under R version 4.0.5 \r\n7: package 'dplyr' was built under R version 4.0.5 \r\n8: package 'forcats' was built under R version 4.0.5 \r\n9: package 'tarchetypes' was built under R version 4.0.4 \r\n\r\n\r\nThe ‘Stems’ (circles) represent data file input, intermediate and final data wrangling transformations with computations of LAI and VWR. The functions (triangles) take an input stem and output a new stem shown by linkages in the pipeline. Color green indicates the stems and functions are up to date - grey indicates changes have been made since the last tar_make() call.\r\nRead data\r\nOnce the targets pipeline is made, the targets are stored in _targets/objects of the working directory where _targets.R script file is made - these targets can be read into rmarkdown documents using tar_read().\r\n\r\n\r\n\r\nIncoming Data\r\nPoint frame data is currently entered onto excel spreadsheets on field tablets, and species level totals are transcribed to this wide format spreadsheet with site as rows and species as columns. The number represents number of hits for each species in 3 dimensions every 30 cm for 334 pin drops.\r\n\r\n\r\n\r\nTidy Data\r\nThe wide data is transformed into long format (tidy data). It should be noted here that the incoming wide format is an unnecessary intermediate format - a byproduct of doing column-wise calculations in the VWR excel calculator. Going forward, programmatically extracting the site-species-count rows into long format from the data entry spreadsheet should be a goal of the end to end data pipeline.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nWeighted average VWR/LAI\r\nThe sum of vwr for six species divided by sum of lai for six co-ocurring species provides estimates for VWRmax for the OTHER category.\r\nThis value is multiplied by the LAI of the OTHER column to obtain VWR for OTHER.\r\n\r\n\r\n\r\nSpecies level VWR\r\nHere we combine the site VWRs from the six dominant species and from the OTHER column into a single column.\r\n\r\n\r\n\r\nSite-level VWR\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2022-09-08T20:39:20-07:00"
    }
  ],
  "collections": []
}
